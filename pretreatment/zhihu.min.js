function parseSgmodule(body){let lines=body.split('\n');let currentBlock='';let currentComment='';let rules={};let isCommented=false;let rule_flag=false;lines.forEach(line=>{line=line.trim();if(line.startsWith('#!')){if(!rules['metadata']){rules['metadata']=[]}rules['metadata'].push(line.trim())}else{if(line.startsWith('[')&&line.endsWith(']')){currentBlock=line.slice(1,-1);currentComment=''}else if(line.startsWith('#')){if(currentComment){line=line.slice(1).trim();isCommented=true;rule_flag=true}else{currentComment=line.slice(1).trim()}}else if(line){isCommented=false;rule_flag=true}if(rule_flag){if(!rules[currentBlock]){rules[currentBlock]=[]}if(currentBlock==='metadate'){rules[currentBlock].push(line.trim())}else{rules[currentBlock].push({rule:line,comment:currentComment,isCommented:isCommented})}currentComment='';rule_flag=false}}});return rules}function restoreSgmodule(rules){let restoredContent='';if(rules['metadata']){rules['metadata'].forEach(meta=>{restoredContent+=`${meta}\n`})}const sections=['Rule','other','Script','MITM'];sections.forEach(section=>{if(section!=='other'){if(rules[section]&&rules[section].length>0){restoredContent+=`\n[${section}]\n`;rules[section].forEach(rule=>{if(rule.comment){restoredContent+=`#${rule.comment}\n`}if(rule.isCommented){restoredContent+=`#${rule.rule}\n`}else{restoredContent+=`${rule.rule}\n`}})}}else{Object.keys(rules).sort().forEach(section=>{if(!['metadata','Rule','Script','MITM'].includes(section)&&rules[section].length>0){restoredContent+=`\n[${section}]\n`;rules[section].forEach(rule=>{if(rule.comment){restoredContent+=`#${rule.comment}\n`}if(rule.isCommented){restoredContent+=`#${rule.rule}\n`}else{restoredContent+=`${rule.rule}\n`}})}})}});return restoredContent.trim()}function modifyRules(rules){let toBeModifiedRules=[{block:'Map Local',condition:{element:'comment',data:'屏蔽我的页面开通会员的卡片'},modification:{element:'isCommented',data:false}}];toBeModifiedRules.forEach(toBeModifiedRule=>{if(rules[toBeModifiedRule.block]){rules[toBeModifiedRule.block].forEach(rule=>{if(rule[toBeModifiedRule.condition.element]===toBeModifiedRule.condition.data){rule[toBeModifiedRule.modification.element]=toBeModifiedRule.modification.data}})}});const targetDataUrl='https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/blank/blank_dict.json';const newSuffix=' - reject-dict';if(rules['Map Local']){rules['Map Local']=rules['Map Local'].filter(ruleObj=>{if(ruleObj.rule.includes(`data="${targetDataUrl}"`)){let urlRegexMatch=ruleObj.rule.match(/^(.+)\s+data=/);if(!rules['URL Rewrite']){rules['URL Rewrite']=[]}if(urlRegexMatch){let urlRegex=urlRegexMatch[1].trim();rules['URL Rewrite'].push({rule:`${urlRegex}${newSuffix}`,comment:ruleObj.comment,isCommented:ruleObj.isCommented});return false}}return true})}return rules}body=restoreSgmodule(modifyRules(parseSgmodule(body)))